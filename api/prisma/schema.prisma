generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum Type {
  retailer
  industry
}

enum NotificationFrequency {
  real_time
  daily
  weekly
  never
}

enum Theme {
  light
  dark
  system
}

enum Language {
  en
  pt_BR
  es
}

enum DateFormat {
  dd_mm_yyyy
  mm_dd_yyyy
  yyyy_mm_dd
}

enum RewardsType {
  credit
  analystic
  support
  training
  ticket
}

model User {
  id String @id @default(uuid())

  auth   Auth?   @relation("UserAuth")
  authId String? @unique

  profile   Profile? @relation("UserProfile")
  profileId String?  @unique

  refreshToken  RefreshToken?
  store         Store?
  preferences   UserPreferences?
  notifications UserNotifications?

  @@map("users")
}

model Auth {
  id                        String  @id @default(uuid())
  email                     String  @unique
  password                  String
  type                      Type
  two_factor_authentication Boolean @default(false)

  user         User           @relation("UserAuth", fields: [userId], references: [id])
  userId       String         @unique
  LoginSession LoginSession[]

  @@map("auth")
}

model Profile {
  id          String @id @default(uuid())
  email       String
  name        String
  phoneNumber String
  photoUrl    String
  bio         String
  type        Type
  dateOfBirth String

  user   User   @relation("UserProfile", fields: [userId], references: [id])
  userId String @unique

  @@map("profile")
}

model RefreshToken {
  id        String   @id @default(uuid())
  expiresIn Int
  expiresAt DateTime

  user   User   @relation(fields: [userId], references: [id])
  userId String @unique

  @@map("refresh_token")
}

model Store {
  id          String @id @default(uuid())
  name        String
  type        String
  size        Int
  employees   Int
  address     String
  city        String
  state       String
  zipCode     String
  country     String
  description String

  rewards Rewards? @relation("StoreRewards")

  rewardsReedemed RewardsReedemed[] @relation("StoreRewardsReedemed")

  user    User      @relation(fields: [userId], references: [id])
  userId  String    @unique
  Product Product[]

  @@map("store")
}

model Rewards {
  id             String @id @default(uuid())
  points         Int
  streak         Int
  longest_streak Int

  store   Store  @relation("StoreRewards", fields: [storeId], references: [id])
  storeId String @unique

  @@map("rewards")
}

model RewardsList {
  id          String      @id @default(uuid())
  title       String
  description String
  type        RewardsType
  points      Int

  rewardsReedemed RewardsReedemed[] @relation("RewardsListReedemed")

  @@map("rewards_list")
}

model RewardsReedemed {
  id String @id @default(uuid())

  store   Store  @relation("StoreRewardsReedemed", fields: [storeId], references: [id])
  storeId String

  rewardsList   RewardsList @relation("RewardsListReedemed", fields: [rewardsListId], references: [id])
  rewardsListId String

  @@unique([storeId, rewardsListId])
  @@map("rewards_reedemed")
}

model Product {
  id      String @id @default(uuid())
  name    String
  store   Store  @relation(fields: [storeId], references: [id])
  storeId String

  @@map("products")
}

model UserPreferences {
  id           String     @id @default(uuid())
  theme        Theme
  language     Language
  dateFormat   DateFormat
  reduceMotion Boolean

  user   User   @relation(fields: [userId], references: [id])
  userId String @unique

  @@map("user_preferences")
}

model UserNotifications {
  id                       String                @id @default(uuid())
  email_submision          Boolean
  email_campaign           Boolean
  email_rewards_and_points Boolean
  email_newsletter         Boolean
  submission               Boolean
  campaign                 Boolean
  rewards_and_points       Boolean
  notification_frequency   NotificationFrequency

  user   User   @relation(fields: [userId], references: [id])
  userId String @unique

  @@map("user_notifications")
}

model LoginSession {
  id         String @id @default(uuid())
  name       String
  type       String
  address    String
  last_login String

  auth   Auth   @relation(fields: [authId], references: [id])
  authId String

  @@map("login_sessions")
}
